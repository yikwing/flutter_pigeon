package com.example.myflutterdemo;
// Autogenerated from Pigeon (v0.1.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Generated class from Pigeon.
 */
@SuppressWarnings("unused")
public class Pigeon {

    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static class SendMsg {
        private String msg;

        public String getMsg() {
            return msg;
        }

        public void setMsg(String setterArg) {
            this.msg = setterArg;
        }

        HashMap toMap() {
            HashMap<String, Object> toMapResult = new HashMap<>();
            toMapResult.put("msg", msg);
            return toMapResult;
        }

        static SendMsg fromMap(HashMap map) {
            SendMsg fromMapResult = new SendMsg();
            Object msg = map.get("msg");
            fromMapResult.msg = (String) msg;
            return fromMapResult;
        }
    }

    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static class CallBackMsg {
        private String page;

        public String getPage() {
            return page;
        }

        public void setPage(String setterArg) {
            this.page = setterArg;
        }

        private String callback;

        public String getCallback() {
            return callback;
        }

        public void setCallback(String setterArg) {
            this.callback = setterArg;
        }

        HashMap toMap() {
            HashMap<String, Object> toMapResult = new HashMap<>();
            toMapResult.put("page", page);
            toMapResult.put("callback", callback);
            return toMapResult;
        }

        static CallBackMsg fromMap(HashMap map) {
            CallBackMsg fromMapResult = new CallBackMsg();
            Object page = map.get("page");
            fromMapResult.page = (String) page;
            Object callback = map.get("callback");
            fromMapResult.callback = (String) callback;
            return fromMapResult;
        }
    }

    /**
     * Generated class from Pigeon that represents Flutter messages that can be called from Java.
     */
    public static class ApiToFlutter {
        private final BinaryMessenger binaryMessenger;

        public ApiToFlutter(BinaryMessenger argBinaryMessenger) {
            this.binaryMessenger = argBinaryMessenger;
        }

        public interface Reply<T> {
            void reply(T reply);
        }

        public void toFlutterMsg(SendMsg argInput, Reply<Void> callback) {
            BasicMessageChannel<Object> channel =
                    new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiToFlutter.toFlutterMsg", new StandardMessageCodec());
            HashMap inputMap = argInput.toMap();
            channel.send(inputMap, channelReply -> {
                callback.reply(null);
            });
        }
    }

    /**
     * Generated interface from Pigeon that represents a handler of messages from Flutter.
     */
    public interface ApiToNative {
        void toHostMsg(CallBackMsg arg);

        /**
         * Sets up an instance of `ApiToNative` to handle messages through the `binaryMessenger`
         */
        static void setup(BinaryMessenger binaryMessenger, ApiToNative api) {
            {
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ApiToNative.toHostMsg", new StandardMessageCodec());
                if (api != null) {
                    channel.setMessageHandler((message, reply) -> {
                        HashMap<String, HashMap> wrapped = new HashMap<>();
                        try {
                            @SuppressWarnings("ConstantConditions")
                            CallBackMsg input = CallBackMsg.fromMap((HashMap) message);
                            api.toHostMsg(input);
                            wrapped.put("result", null);
                        } catch (Exception exception) {
                            wrapped.put("error", wrapError(exception));
                        }
                        reply.reply(wrapped);
                    });
                } else {
                    channel.setMessageHandler(null);
                }
            }
        }
    }

    private static HashMap wrapError(Exception exception) {
        HashMap<String, Object> errorMap = new HashMap<>();
        errorMap.put("message", exception.toString());
        errorMap.put("code", exception.getClass().getSimpleName());
        errorMap.put("details", null);
        return errorMap;
    }
}
