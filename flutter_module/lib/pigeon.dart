// Autogenerated from Pigeon (v0.1.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class SendMsg {
  String msg;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['msg'] = msg;
    return pigeonMap;
  }
  // ignore: unused_element
  static SendMsg _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SendMsg result = SendMsg();
    result.msg = pigeonMap['msg'];
    return result;
  }
}

class CallBackMsg {
  String page;
  String callback;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['page'] = page;
    pigeonMap['callback'] = callback;
    return pigeonMap;
  }
  // ignore: unused_element
  static CallBackMsg _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CallBackMsg result = CallBackMsg();
    result.page = pigeonMap['page'];
    result.callback = pigeonMap['callback'];
    return result;
  }
}

abstract class ApiToFlutter {
  void toFlutterMsg(SendMsg arg);
  static void setup(ApiToFlutter api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.ApiToFlutter.toFlutterMsg', StandardMessageCodec());
      if (api == null) {
        channel.setMessageHandler(null);
      } else {

        channel.setMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final SendMsg input = SendMsg._fromMap(mapMessage);
          api.toFlutterMsg(input);
        });
      }
    }
  }
}

class ApiToNative {
  Future<void> toHostMsg(CallBackMsg arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.ApiToNative.toHostMsg', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
}

